// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSuperuser = `-- name: CreateSuperuser :exec
INSERT INTO users (email, PASSWORD, is_teacher, is_superuser, first_name, last_name, slug)
    VALUES ('admin', $1, FALSE, TRUE, 'Admin', 'Admin', 'Admin')
ON CONFLICT(email) DO UPDATE SET password = $1
`

func (q *Queries) CreateSuperuser(ctx context.Context, password []byte) error {
	_, err := q.db.Exec(ctx, createSuperuser, password)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, PASSWORD, is_teacher, first_name, middle_name, last_name, slug)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, email, password, is_teacher, is_superuser, first_name, middle_name, last_name, slug
`

type CreateUserParams struct {
	Email      string
	Password   []byte
	IsTeacher  pgtype.Bool
	FirstName  string
	MiddleName pgtype.Text
	LastName   string
	Slug       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.IsTeacher,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Slug,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.IsTeacher,
		&i.IsSuperuser,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Slug,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, email, password, is_teacher, is_superuser, first_name, middle_name, last_name, slug
FROM
    users
WHERE
    email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.IsTeacher,
		&i.IsSuperuser,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Slug,
	)
	return i, err
}
