// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teachers.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTeacher = `-- name: CreateTeacher :one
WITH new_user AS (
	INSERT INTO users (email, password, is_teacher, first_name, middle_name, last_name, slug)
		VALUES ($1, $2, true, $3, $4, $5, $6)
	RETURNING id, email, password, is_teacher, is_superuser, first_name, middle_name, last_name, slug, tg_chat_id
)
INSERT INTO teachers (user_id)
	VALUES ((SELECT id FROM new_user))
RETURNING user_id
`

type CreateTeacherParams struct {
	Email      string
	Password   []byte
	FirstName  string
	MiddleName pgtype.Text
	LastName   string
	Slug       string
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTeacher,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Slug,
	)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getAllTeachers = `-- name: GetAllTeachers :many
SELECT u.id, u.email, u.password, u.is_teacher, u.is_superuser, u.first_name, u.middle_name, u.last_name, u.slug, u.tg_chat_id, t.user_id, t.subject_ids, t.biography
FROM teachers AS T
INNER JOIN users AS U ON T.user_id = U.id
ORDER BY T.user_id
`

type GetAllTeachersRow struct {
	User    User
	Teacher Teacher
}

func (q *Queries) GetAllTeachers(ctx context.Context) ([]GetAllTeachersRow, error) {
	rows, err := q.db.Query(ctx, getAllTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTeachersRow
	for rows.Next() {
		var i GetAllTeachersRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.User.Password,
			&i.User.IsTeacher,
			&i.User.IsSuperuser,
			&i.User.FirstName,
			&i.User.MiddleName,
			&i.User.LastName,
			&i.User.Slug,
			&i.User.TgChatID,
			&i.Teacher.UserID,
			&i.Teacher.SubjectIds,
			&i.Teacher.Biography,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherByID = `-- name: GetTeacherByID :one
SELECT u.id, u.email, u.password, u.is_teacher, u.is_superuser, u.first_name, u.middle_name, u.last_name, u.slug, u.tg_chat_id, t.user_id, t.subject_ids, t.biography
FROM teachers AS T
INNER JOIN users AS U ON T.user_id = U.id
WHERE T.user_id = $1
LIMIT 1
`

type GetTeacherByIDRow struct {
	User    User
	Teacher Teacher
}

func (q *Queries) GetTeacherByID(ctx context.Context, userID int32) (GetTeacherByIDRow, error) {
	row := q.db.QueryRow(ctx, getTeacherByID, userID)
	var i GetTeacherByIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Email,
		&i.User.Password,
		&i.User.IsTeacher,
		&i.User.IsSuperuser,
		&i.User.FirstName,
		&i.User.MiddleName,
		&i.User.LastName,
		&i.User.Slug,
		&i.User.TgChatID,
		&i.Teacher.UserID,
		&i.Teacher.SubjectIds,
		&i.Teacher.Biography,
	)
	return i, err
}

const getTeacherBySlug = `-- name: GetTeacherBySlug :one
SELECT u.id, u.email, u.password, u.is_teacher, u.is_superuser, u.first_name, u.middle_name, u.last_name, u.slug, u.tg_chat_id, t.user_id, t.subject_ids, t.biography
FROM teachers AS T
INNER JOIN users AS U ON T.user_id = U.id
WHERE U.slug = $1
LIMIT 1
`

type GetTeacherBySlugRow struct {
	User    User
	Teacher Teacher
}

func (q *Queries) GetTeacherBySlug(ctx context.Context, slug string) (GetTeacherBySlugRow, error) {
	row := q.db.QueryRow(ctx, getTeacherBySlug, slug)
	var i GetTeacherBySlugRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Email,
		&i.User.Password,
		&i.User.IsTeacher,
		&i.User.IsSuperuser,
		&i.User.FirstName,
		&i.User.MiddleName,
		&i.User.LastName,
		&i.User.Slug,
		&i.User.TgChatID,
		&i.Teacher.UserID,
		&i.Teacher.SubjectIds,
		&i.Teacher.Biography,
	)
	return i, err
}
