// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: misc.sql

package repository

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (title)
	VALUES ($1)
RETURNING id, title
`

func (q *Queries) CreateCategory(ctx context.Context, title string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, title)
	var i Category
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (title)
	VALUES ($1)
RETURNING id, title
`

func (q *Queries) CreateSubject(ctx context.Context, title string) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, title)
	var i Subject
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, title
FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSubjects = `-- name: GetAllSubjects :many
SELECT id, title
FROM subjects
`

func (q *Queries) GetAllSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.Query(ctx, getAllSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
